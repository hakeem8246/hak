# Gradle files
.gradle/
build/

# Local configuration file (sdk path, etc)
local.properties

# Log/OS Files
*.log

# Android Studio generated files and folders
captures/
.externalNativeBuild/
.cxx/
*.apk
output.json

# IntelliJ
*.iml
.idea/
misc.xml
deploymentTargetDropDown.xml
render.experimental.xml

# Keystore files
*.jks
*.keystore

# Google Services (e.g. APIs or Firebase)
google-services.json

# Android Profiling
*.hprof

import pygame

# initialize Pygame
pygame.init()

# set up the game screen
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))

# set up the colors
bg_color = (0, 0, 0)
fg_color = (255, 255, 255)

# set up the ball properties
ball_radius = 10
ball_pos = [int(screen_width/2), int(screen_height/2)]
ball_vel = [5, 5]

# set up the paddle properties
paddle_width = 10
paddle_height = 80
paddle_gap = 50
paddle_speed = 5
paddle_left_pos = [paddle_gap, int(screen_height/2)]
paddle_right_pos = [screen_width - paddle_gap - paddle_width, int(screen_height/2)]

# define a function to draw the ball
def draw_ball(pos):
    pygame.draw.circle(screen, fg_color, pos, ball_radius)

# define a function to draw a paddle
def draw_paddle(pos):
    pygame.draw.rect(screen, fg_color, (pos[0], pos[1], paddle_width, paddle_height))

# define a function to move a paddle
def move_paddle(pos, direction):
    if direction == "up":
        pos[1] -= paddle_speed
    elif direction == "down":
        pos[1] += paddle_speed

# set up the main game loop
game_running = True
while game_running:
    # handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                game_running = False
            elif event.key == pygame.K_w:
                move_paddle(paddle_left_pos, "up")
            elif event.key == pygame.K_s:
                move_paddle(paddle_left_pos, "down")
            elif event.key == pygame.K_UP:
                move_paddle(paddle_right_pos, "up")
            elif event.key == pygame.K_DOWN:
                move_paddle(paddle_right_pos, "down")

    # move the ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]

    # check for collisions with the walls
    if ball_pos[1] - ball_radius <= 0 or ball_pos[1] + ball_radius >= screen_height:
        ball_vel[1] *= -1
    if ball_pos[0] - ball_radius <= 0:
        ball_pos = [int(screen_width/2), int(screen_height/2)]
        ball_vel = [5, 5]
    if ball_pos[0] + ball_radius >= screen_width:
        ball_pos = [int(screen_width/2), int(screen_height/2)]
        ball_vel = [-5, -5]

    # check for collisions with the paddles
    if ball_pos[0] - ball_radius <= paddle_left_pos[0] + paddle_width and ball_pos[1] >= paddle_left_pos[1] and ball_pos[1] <= paddle_left_pos[1] + paddle_height:
        ball_vel[0] *= -1
    if ball_pos[0] + ball_radius >= paddle_right_pos[0] and ball_pos[1] >= paddle_right_pos[1] and ball_pos[1] <= paddle_right_pos[1] + paddle_height:
        ball_vel[0] *= -1

    # clear the screen
    screen
